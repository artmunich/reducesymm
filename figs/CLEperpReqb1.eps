%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.97 Copyright 2008 Radical Eye Software
%%Title: CLEperpReqb1.eps.dvi
%%CreationDate: Sat Dec 19 21:43:55 2009
%%BoundingBox: -106 392 404 923
%%DocumentFonts: Times-Italic Times-Roman Times-Italic-MISO
%%+ Times-Roman-MISO
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E CLEperpReqb1.eps.dvi -o CLEperpReqb1.eps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2009.12.19:2143
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 34 2008-06-25 17:20:01Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.05, 2008/06/25
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ] cvx def } def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
%-----------------------------------------------------------------------------%

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin 40258437 52099154 1000 600 600 (CLEperpReqb1.eps.dvi)
@start end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-1477 2727 a @beginspecial 53 @llx 48 @lly 561 @urx 577
@ury 5080 @rwi @setspecial
%%BeginDocument: CLEperpReqb1Graph.png.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: bmeps
%%Title: CLEperpReqb1Graph.png
%%Pages: 1
%%PageOrder: Ascend
%%DocumentData: Clean7Bit
%%BoundingBox: 53 48 561 577
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
{
gsave
13 dict begin
/fa currentfile /ASCII85Decode filter def
/fb fa /FlateDecode filter def
/DeviceRGB setcolorspace
0 607 translate 600 607 scale
<<
/ImageType 1
/Width 600 /Height 607 /ImageMatrix [600 0 0 -607 0 0]
/DataSource fb
/BitsPerComponent 8
/Decode [0 1 0 1 0 1]
/Interpolate true
>>
image
fb closefile
fa flushfile fa closefile
end
grestore
} exec
GhVQ@?#D7;;QaGP%+0dbJ^kE;5R5ZH5[3#[M0lC="&1b'M0%=5AN]@[bfHEVb,Tbo=U5f:YWY*=
^>k-1N/R`:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'flI/MSda+rge!:VK.E?YD@
Om\_3J=^9O^b+>coJc?b!ruBNhoXd-?NC.G\c+5]1&OlK!&)aWhG<5D"T7fKK`JbSIoH^OjI^Z.
37<>$q,.+L^k2XDA&+^$[Qbj?m6N3)hPWRf"?o!DIsDTMWr]12i'H;GqYU(]q>90**rHNi"C>n0
.`@hPbJshu!Y"kkfC\7G)a-`G5f/'?q.9N\nIkiZ6%Au)6L^XK)1Vae&3L6FTDOIi&3L4P+9bRb
GS#,#"?d\dL_kC,?[d9^$Gh8fn]Z5-n6l7dnaYj0/Yc]=LkL#H#QO%H#F.cpJD``_+M`O&p2kR0
n5TDF5qjEL6L`o7%oOPf&3Pc8H150c&.Agc`/?bqJ,eFm4OntJE@M*9&7Qc,&GX9.iPA;#C6\f%
Jd9,ESf'4)GS%(P+;KJ/_1UZ3J,qrii'Dkr_1Qt\J++Qt&3L4>r8BrD113B:+<Jk4U?J`bW=TID
*lQ5a(d&':":sL'*rI"`D2Sr6#Ta*ZnfSb\4:!"h5qjF+&23dNQ;N_dW"<nA+;KJ/_1QtbJ++Qt
&3PbmLI!!";A/V$n0#N!&-Kb$!"XY^_1TOW*i)+V+F"G[aFbU$n/uu&Es2dG`BX@>s69=:6/Z&j
r6(E;cOsQ%^fJoIhMF@NVls.L+%WUloG,==,TH:sGS#,"!=t'.hnK$V2WR0n+Rh&eSlWba98G\9
n/t8@*W;Q&Xag:&TDt)[!?M@G?DYE;IZcbs6QQ@@!d?KZR]W(:b+p9gn0%-O_-7aq>bKObC$q]^
*WuuTGDUm!P+!fD8#hXU_1TPj%!\;TOq7F8(%NJl&6RM69i8(kBlf'-25S^><QKgN6!utbG3Eiu
6?]sul+pKp0Ehu=#Jkq71uRLD*83AUYi2]/+V0/0_14I"@!N%OBg:[B<60^M6'1#&qC<MhS-Mjh
RI_oh6%B3VJ5ZO-;KH$5TgBe'%tXg`2W02`)c7ah!^$_m9HJ0JBuBIZGJko<]F*8LKKKM]":6\l
^ldh;A`1e[.U:,K,R>Fo".h0^Mua/*H/tcKT;TDOG9-m3&.DYu@!;qLk@8[J]"Kc`H`3qO="B:$
+F"G+GbG.BNO*j)qa@?h*f)4lB)W&]%g"kL2]JtsIjb0l"Z[&^6668S&-j(lWFhM`"($H$mS=c[
WN]PEj["D%nY@"h0js=T&KS>39tt2I<JAuL?YYL\#Jl%#^bZFeH'"n!SoqX6+;HM8)C7]=+;f&<
"'4f.a^#OKT.o\-*X&DQD_PS[:=:FAcTUZ^RZ\$$cN"IW4GYp5YW=a#3Ekg5?a.Fc9cf5s>%Mpi
49u.]-,I+r>iBB=<+44-fD`'<#Tgoio_01)-3q^F_U0jo6%B41GQZf"IoR4I_h03?*WuRg)t;T+
?`n?KG7k^i>D50Fn/uVK^[a^^hrEILOEWEe7YNr1n/u?-mgTJkQqulTNB'39nfY`#oXC:g,-_m8
Yn&h"g34'$Rsla(oLR&U!"[N8o*i,F%k"rlq_ss!K^CK8,XLoB\?EIj=3&2%2;k1;92'WlEjH;f
!^)9%nZBIdoX0=s118OY'/p%);BZPP4NMh-EaRK*h*]Km%9WE*[]6Y`]C'Yk4:(F!g"f_WeOB69
!u;UEo0;BD?M.`f;dj^)O9Ye-I":8FCV>Q/m-=i"jLZ8p%c)2>iTKQ+@:(9bb(CrF*i--_bH<=i
]FGE,i7nEb<?^f/bT5Gl4:(H7/`cR_a)r?*j6jYl2`9jgLu5[\F^R]hCatG8+Rf@AXro8V)jeF=
bGmXAXTn.@h[.&Ei>>,OD1EWJh#&WC"<Nu8aD:;_f[gP\B>@0q\+bMTXcum1%g$[uQG:p*$lJ62
^f^l#8I*nG#K&h^h:dKfe9JF=p4$?GU2Q:SVToZ,?o7q-(ju0l@TeBi77&$uKe8FnGjr[,0QRb4
o#tCiJC-R7H8$rEH$7M=7moZb`3i&rc?a\]VKhTi#)r7Bkemn^o[Ah-W76-ZIoB\L8D*4DFo"OP
n81`Kf"U1!#;K;3))E=N^iB*KF(32^R">QmWpmhG,f(i7c<lb?&W&j<jTb(sI>-R#mfE$p;)o79
T+E'^&[M!JnfUC1(r\gTH.GU-J4JgA<XR]jiJ7ien_b^o[$T)bf(4"R+HDOk`f,VuFIWBD@q19K
2h/p6ml9OI88g'Mi2cM5al,Nj&d,$J6E=h'6Y)T\c7:[=[EOru\'OChNS_O)enWMV%sf.c)?Za8
#X-"S0lWuIPW&\/T8fWRpXFJe#Ajr7.1^_kGRtZ00OG*VDSSs<4*m&`iJg,;#E!C__T3K9&$d?1
nfWrNi*[_8gOL:FE;[kS^8(4f.a3/,kC`7H`eEX0k!9uUGGZ'@^I]f@!V]jPHA\rk\:([YZg]MW
mR:mXUqMlq/^'[*K08o;"3rBLp),Q0q0Ue+h*Y\8?)+MOg`+)#O`/d&lO6e"'JH:OcO:=.)1jc!
=@S`L)_eJ1Qp!aBC;YW1=7bAG$aSC9C/4E.n0!lK0P2+fO"fM>pC-IqWghC72%iCU(*O2tU(][;
4G_S3P.D$pI0M5Ui'/</jL<E^<EX&?'iqg5RQ>8K*k_F?TTtfS_1T3N@!<%')_c#,b/"'[r<8B4
/Fj:nW%\EJUITRUjraql#Eajoq*O;e#&G;51\g$QX"aSL;`q!]'LrGV'>fB?Mh1%*6CSBcprpDJ
7dcVhcVj(hKKKP1O:&6`%#gL$Qjs3F$_)b\2-Nbq2go;S8(Gpmc%@8InW3tnY]Yf*Y+jrXg#`O7
p!l]>POdS'R*GY5eP11EE39E^Bbn+*Z6=I32$4oR%s,)Y>DKF'pRYf>,i!bWP7iiHNhiBt#a#A2
^oA8^?6Q[j^iHOBnEajb>t0MuGjsG36)u:NJd5@8?jueI1_i?X!OFW`T)UWjGVJ$0`.MGb*lL>K
>cJ@hC;=WX2arGNcT0m8-SL`kN,/b@]MT(gXRhpRgfFbU)R*"e,GueV<-Y)Af5)512R4KNn9H`B
=f%X%^cq:J4AgA=2B<`!fn1e3a]K2/&3RI_!AEep.BLOY6Xu9pFiQnXf(e$o_WoD:jhlr(4_SmJ
Crh5^Pi1\]I9]!1`diar9\uP/8Wb#8eMK5Q_.4bUp7N`MYTXNd]F^NgJP?@(>Lb[aq*+cMmJ>)5
@9J:a%n>r`_J$^<.ITP8"<6pi)[n]S5"pD^g!@H3c%%&847iiL&d`gpCrh>nGc1c>(;TP=@1)h8
gOOur<"4SaPI+Pt_;3lE*;<i`hm<6%C6AT:o&-!Ii&QM<B\_sDHSE469Ua`]X1#MXmD3_MnW%tc
_Tb@Z"<6pi,mK=H26R8(_!6o1:#EO0&RjfSVnU)N<`m1.#C3QMI60P>%"\q6n6lN[9D`.HY2SL6
J0!N+\OY?C9Q&RX8VL0Dm:iWJSC?ObRtG*9*Y\^S+,aeFDKSo^dXY7k'QuU>L&X=9]N$akk%r,d
*`NgW)tMqA@UM^)M3a^QbZ8,,!Dh'LT?%N8@-a;JEl>:ELqDE'#E^`K?ggU2$qqF'WsUA)`t&'m
)BW.*=iO(CnDK]BR[5_\O9^h&?sM(i;mjN9!BX&mkF]j+(&k:pnmKp-k(O4%jM=+aY1=+^/VI.8
kXBeaC%>OqUlX%R-!QC_jX2ie<m>m9jrj.e)tMpS!N3uRjINjC(g((T$O1E>XH>RtT6r;S<+2YD
V8IqJ4%,\IK973oW[J34jM;'<E02!I\U%>,nmhr@3ZXjE@T!P[6fABum48bpRme&\_1k)I*WmaQ
aDq/4eP33PSYP<1h^n^pmcq]gmIrccK8QC26QTK;J,.XfZl#1pNL=Rt-N,6_gWfc)Wko-,f[6;5
K4%%fI's&OLk2],0UX#a.=4P-B[DcP4*J%Z4!J*^laFofIEeJoD@VgP/lCSurme^7KDFUl'0SBG
IV&@ab2YE:q)"!#@@@8UoI%BrXMIH[jMAZEd9CDs>,&if4BU0AEkY0)ToOq[ZO3Df6<lAJ*r<?Z
<T0>eN36bi78_uT2LL8b46h0\6>1I8I\%/S1[G(6!DiUAChg$IS=buMUSUOO;&$O:%A2t&I)g[r
FHdmCL_ptc8Re)=H&r%3Dq?",iSGr(G]7_VFmfj]K>9#Wo&*N)YGnY/]M]a^"3ZDFr3AP#^uWt6
Z!lsM^Gcr$.M!T33N+>52WV],I+RPq-3Gk>"!c2%dp^%>qe1FkF!MA6>"5P6/3NJ;&%8's+@34T
&'h2fji;(Y)_bk_KdM;39h0<T2HpVMV:=15_gE`"lTq"m^tW^NU'CpYEE-#ep[_@tel:tY$nM4`
^rD>h^s%+r+.bChZs`$@@.KLO4P4Xe,4cUP'F!oA_d3jKO]lA=4ee@ZcYN=n\6#3UX5ArU^fCR"
s-e#d!_)skUqLsXa*BA1\2d*3@)E@@Q8dEsL;VIK3$ec@6rkADR43eYbOk-7N_AG5=H8&54?1#G
7SsjZdt[&_X5hjg`2<CAdVk:P;[i#1M.sPJ2n$/t3o]`WIuA?oS*n,6h-*qUbU*iQ2+GRh'3LGe
r:PKogTQO\p#EI+H%$oOmI"b,M)d0mY&(nd$;^BRaQB.i-n&o>+?'12I_ajA>SOk6#&Z'7*W7\f
]5C^Fqc7@(Q?AT[:`3Q`U5G\<[_'_`B9di!;>T@'^FBFGeO$;CmR@E)X)QF<-TB-m4a:uaj?^/e
LS&osC5T[L)p<D/&*>N<8j:>7(`9fLR.2#<0*C?"=Lap+WMR%"9oX_K5t+X5-4.uGfa2Ta%fEea
'+ae26"sVaP;+b3-R6c6\;Wnh$_`J[\W^=#8Inl%ZH$el.Z34o7F>[ri+$W6Qj:8'3[:u%O,ecG
ir]'f+nQQMWiJW2WZF9s8`h`r;2[O@/"*TIi>!E(p&#><_D]BK]EHQ>J[[Gnq&VYEF&5^JKQqh_
cL]s#Q/lq!m_*tnI+;Ut9_D;<nfY>2=7u%Td[TR=.4=?&muE\cMX$;>Kb_.FgMk2c/*rJFqA+F,
R2Z7/[Etr3U8oBuVPd_&nmLFg.uFE(Q0/o@][?Pk6[sirJ-KLkjK=#OHA'-l[egh,Vg*0ePI'"r
EGeYGZj"8IN]$FLE<X>g,!17'n1*U5H4Hu10N4g,Z'LbY`P@<OMutsCA*h.Pj[E%)2GRJu&+s#]
9;]I%HMj$A=8fg%@UNt'[/1F>A)IGq;b\;QBp'q6r@*U*;iJ/0V6o0s`sc:t>hsiq/[YCc`8b?8
19L:rY^:G1@Sp*[$m+HC.Ih@sCHlE"c+KIj(iY1pR)d7_]EdK<-CG]$MQYV]C(85*.\*ds*EktX
#/cqV(TfU,k@7mVNqt:3ah<"+\T>.s&teo%/&*G\BWep0GA'k'YsH%FM8q(3K\rMA_g?^6j)UZ;
$uA'J=H.m^>3L<B@(-@GRq0NsU7%FD_B9ni%@[P?0DN/DCj7H@k"!65@pheYF>$2)OgWQ&][&-n
4c_4Q:-Uoq%,r-Xd\_\B<uWd\_/`680OQ`g6=^$X?jtXRh\H<p*ZSmWM=lb#VnK#\g,O-WNij=,
f<jLd^O2@>?o<6H^+d>"k,24?e3_-i,<XVi3EWF3$l29SaP^o1bX[h?bpf2o^$`2t`#+kENT6C0
ki6/\dY#rW3I#.5</1n/\jaSmjcD@i-GfUe/QiI@g16A!C8(*D*CXEf2KRRrXsf/7K6X^6Df<OS
O1@.gl&Y6/r2(ca8hIFIN4^!PS-MDY'NjDW>d`OB*rNE1=LI,[_][uHg\R=4[F!CJaM1Q'OdgI+
l+o?V.&oW=Ql?Rf5?i-uBuc&@fP84l>%jN2PIc7;!@,u;e$1oX:f11/"9r^F2T#8Bg\B?(rLt<t
dM!r3o\DSN/[`s(2;WOn#`=28*fLbjU+q"\RLU3Cn!,t3@?Y&3qr]=*s/Tsiff4UadmIoEh1m4]
CVXp#.Z0B3epKK%..!*Vd.)0`Fi'mAaVh(3mN%^V)&n1f^Y6"W=O$1e:_Z'p6Uhp2bMUPkK?<%d
5<hKscI&7r_i^30?OK"`Jq^rO#o6h`9jo_fGD_\RS.6EEeoEq>?AV$U@P.1^%^P'3Rlg1DXB\PZ
JJ3WD6a6NsF*+=Y%N/ZR9&j+2V!W6R`bd\:meL&Mk/"jHjBaIcFe96;P0&&iYZ%nI#'Iue;dRkR
DZpO)Ut;QLGJ7bIL52Y[elq9O>qt0cK,8hfH*LlO(.I8N%N/[d.#3rMQ`Lf.a6%2fHLUi5d\^43
hWd%26SNON1V?i4"rStL-BATCK>>Sq*4OlN*j!q>:[TY`e3^2P(nK4m@m_p`#%O;S)DaEbqSHW"
/ck%imUg:FpNeqX;U+LQ3PVK!oqI?8]4/DsarW[V.&oW==Q/qE]J+"E)"r0G*cV/;EAeg$$RNX>
hB`rS@#Q*FbW%On(IcZ4+:mJ_0Dtb8]r.I"3:%^Ckr,';+W0UKTqO"!YV91(,>h9J*8)J[$j+mb
nf?mB:>IWepceO'2JaBu'!ke0A*7#t&tJW=N.G,H#L/@X+TkDca1M*Bh><_7mn:j_ARuC4gT]%e
S(nQkm>>mIioo)eP6]!F#nk1_<#E%=p/PCi2J;o-)t%S4ol\5irh%J+>l2)lX[>Pp";Z:WgCXi)
5@\r4#P0iImMQc3<&iBQh"_6Uk*nJX8VbMrYpC7l_f5ujC-8T_m#2kIkoQq[E3H]1^*+=s6gkQj
@n)6t$-+?F6"!_U/-j'KRV+6N@Jgtf[[.JerZ]0?L;E0J\?j%[Zs:0-Fp[);)dXKmYOg]8.m5o'
]!+#Ri4]-CQ]%Su9*g/pXUVH?L6m4*Da%C9F1tgCgM7ZQ_7PB:>9&t@#(c=;@>SB:OU!f[p*mgr
+gLC;Z31Q]fJ=fJXh9&PXOe$p`YulDKL+O>_/O=$mp)U5ojIIkq54A1VS]Y/b7`$doVN6P(iU'%
Fs!'ln*rD"%m89peX,[I)X/[l/=^Z4XG#K^oCCDX=%P)U^_KhYIMe#IUT#pQS@N+q8YJ!Y[adp0
o\eTJ^?U1)[n>o2@d.YSR+0nh*c):<AOZ%cq1M&lftjmmKaf]fW?/.42_W5+K"OXY2<\>K6=GrY
JQ]fCL23T]=72F\X&i[cFoGpGib(C/I/K=%Yk:X1)$[u$2;h1Y4Kq;Dp0dmfVi6,s(N"P(Im.YD
T/M)*"M6ViY4^_pK@Ib;D;^7#4K1gH`IfBo*]@k-B$:uOkNK\[0:u!eK*9Nug-`d9hEM!KO9^>1
0T=tsp/>l(mCirf=i8HSn5G%kEu*REN8cD\PpL[W#G2S4_qB<C<>BD[?hWAg?`T)Cq(Zg'U]`WO
ma(q4.D]p1aD3*3Jd8@<Jg7.-$\Q6)gc+Pora,Q`UG!7?7"_Go`6fjHcU[kXhCut;'>1LO02*.u
TJ-WkWk;kM.9p&`*=5LM"doO/:P+]GS$lHKc!8nCrgWpT(IMV-(^+_(_9D)'$ZomtR-MNQOQ8bT
q"\:2<_D7#_3<L$]:TrT#(`gSfT?_pY34?%I*u/M68/7gVb&SV<(]CTkBeJ!M_JgpN%bNrUr)\s
EK1A^[ppZmfIF^N\PFon[$?)'EqfhF$A62<E(:Z*^SLf(c)U9nA*uX>N`11D-+N]"jVsa3.D\Y>
3&_9.mo^D1JHr-Xp!)Y>(&n0e7/'!aj>*+u`Q'9,a:Y]H.>bUh&dE7j#'gb.]MG-%_W7]6nKaTO
Zu-21T9oS'UXN4mpPcOEro]g7U9h6tmMRRgR;pOqn7EW"X0??Ms7sOhcd=-%2.aSWBbHAqhO)V0
_t>OST,oP^nFDI80Z\m^gk@%hf1^8s7f.$oq(YZWn#^i3/#MtJ8Fe7,,:*'Oa1c:?8q,Yu%k]'B
lF$3"+:/+kfThs>;grGI<*9(49g<0hjnC#;]ba9,4]H_(ne-f?^Z50!E:8WXNmngK!UMBh9e@?1
'dcH%A;7F5CajNu0Nq4Cm!Z)&n?eBZnsCKGe#''D"/[aX4N<##c>*40e1pkSrM"RCG-;X-&hLfV
O'70LlPT$[c[UsRNYidXQhHf60h!\iI]T"//t=Q;K0WasOk>AecC@I<cb0REY&fUt&rb;K"d=C<
Fq))\Js!!0k/1S)K#/Z"2AMOuAN(pX>nucI*\>r_E6[/ph8p:gFK,'Yd7ei$Da2u.g1.-q,rVe)
0mmq(dX12p+L%LGqbDP%a-Q_iPM&';O\o#W"QP#2'%+EFf^t(qf?N+t(b<#77/Go.VE@M'^`jhY
oK\\AmsZ%7b,*V3%l7(7Om\4nSf9JqcqX/XX:'3DIECEKZP(+tn,O1m@foEt1V^RF^Rq8SX0?LP
C0=m)5Z`BLPODHh(XNj&`_&2W`kh$sET1+-@1ZO''pd`2Qfc<S^&3*"d:XZd'FDe5(""7BfXD9<
qfWe4:lqc7`fXm[KL+OM.P)u$+"B2bJKGr'V8@!&)jFa#=:q)S`,9_#,JhrgBX0d5el`;f&9t2[
bH"@8$F`,WY/1bW7b;@j-rr`sI^e4A@Fo8<9`m!l_5LYu0n*O"KX2<.+E/,37]t4G7th89<UIH0
TTr;E7./-DXAfcP(Lh-`p==k$HWt:YM4NBBF++rO6/WN@E4uZD5,pR&7]e=,ZP(9jhO&>F>i_XT
c*#?qR4eO8.nD@?:X*6n<[(R*37!5m92q:@?o2a/[T5dtn6f78jc@)F\G"h:jV?/l;q-Idi%Z^O
ZWHq"":%r:\OMQs$V!cXZs$%*JY`1o0jktt&WK`C@q*,#C-2bq?^)n9nBX,L,:_L8%.)U^m&5_0
qkXq+$*id<Fl%O(8T8uE1t(bGiN*1OZ=%pZ$EMeO^:#4HOq$#G2Oiib7]dlg0g-kTE`RbsJ^[TN
4G3:PUD$?ObR>"R8he\Wg`@+5b:6c'ps9]ZA"Y"a[ItGM,lgV>iKkdBXX`+2*m<*]N\EF:_8SRI
rkGV"/#"E#`s@=5ZW3B<RK#BAT2B$jZ(YF?S/qkjbqg47VcAcT0rZ?8-aq&$K)cX(W3E^Jln)n)
m$9d(f.B9sn>\10ImXjd("!k6O,4%c9(3sBnuC7<HN.u60Rl;p1*1U?6o10s$\Kg"0NP30`kq*t
_B<e:'n5B`h-4)=f.`K9oEg/RQ/HmU2!.Mn&I*g,Y@'LnT\oW8o/>9+V@)eWNsLC"S;:;\N8g,L
#PEo0[lm1t"I;qoV,"PN03[RbfJ?B5^tRqG$%pEIE%glCD$rgO75VBl!1:$O2>#+?ab0C<*1KEu
7Z$D2c<qLM_-(]Np68PT@jNE\n\CeO#[gJ_eW#r:]$+E<>>5kH_dM\i)>Ii#G?Za2X,'5lH]0Wa
]QR""?P1"t'lS6?B=YTR*[Xh!-W_-i?\1"H>O[ai;'#j@<oLJ6[]ZFPC_H-CQq$U,N.Sp0@5)fE
S0c!b*+.&l0f]3KTJ-YaE.-Ik1juu^C%FsnN7[dSRHdq3l=n11(t9^MF:ugmZ2.N]Zm$F68cYeA
ETQrX)%UU;46<73"_mCaj,V&PJn<j0i"QL;.GKI7'iABN5gk2U_t?)4XK$#VBo:pLd:V@<DeDmD
oR$t2ru"3t7C666SQ-7:#(_!$Dq/Fd\,We%#HLeH16Xs1a6iURU!(AG*k[C6irp/p@1ZO>Jd%p7
qaH^n.N'>9*eNS]K:s^I>:q=g&^"IT+t=!&p[V^#fZUaL1?Cfpq)\VP3!t".E'1Y?"@om(A"Y"a
CEFB-#(a`V(tFV_^X(RcT7_s<SIYH?p>n0?g**4>H6W`&>7oC,"&NDLWC?4@=SY/s#&*2W_e1<b
<q?A'N_=?N[U@T3/TaW>QE5o5+E64/=L\d6Y_qk^7??/ejsZh088:msF>X@O:CB)R;\d0BMC=!(
.f=I-U-/-*>)"3`n*5n7%E.f<Hlee1_+<?mgt`oj6:E`<`rHrOKjR!1WClQ[:=Xd+ZMpRV]rfY"
_h/sBN;[&B=DqD?(^)P\_7clLP@:[<SRhUiAd`>AX-s6Vib/WfbA"dq("$.V^`X-h[nu$i*;b&"
U0sDS3`E.n7VtIn_0nGU\-/RT>;-s+9#Q#j;.1$GOUCEV&NfaVQ;9Q+(Y/FGmD;m<%h;49BkU1H
K)*lITcshONC8lu?su@%^'TkS5gd8@:@9=r@%RSFs0%#B\g?"?/NA0=-k?A-/1K>]VSDlI,b:+_
@&^lpY?j5okr9_H>(VmHnmdAj_,(^Icl3;#f8VF)XKEr$bE=Vug:Ih>hqQ&$7nYOV%AJtH1*9fV
K!BJfPQucoH*FZICoK+V0)(B'B20]6D`3peo*.lg_Aad<l/%f;DHfpS"AkE0Xs3n1?ug'VFo?%F
@/5T=_27W(%[CFN>;.*q&`l=:)'4b8b%/s=MC&iL^0P?`[NXDG-,Hm5U8p4"]!_cPeV^:Z#i'j!
/4[R_R.Bj.,B:pNdW[93XfD)8%q[^&#:2@d)\WHp$`]!ak[#a6H6q&>dSqiu("t5tK4/mbBf1OU
c%G+D5jLrpZRm"DU&^3\1F$m4D^;mp1EPnmA"mefJdUE"_<UF-R7iN$,e3SEir!Z0:_<jbeUrQH
=D^mfb\5*[-6dGjiSI@tcPfT=J]gY>cIs$J"p$Q+0QNp81NuDYio9a3bt1RBeLu]o=*ZJU'`A:D
7TXM%Zu6>lOqgi&&9r.>r1(*!NJ,tT.kY^6)gp2*#F"mn4Nr?+>T^@;hRO7=l&>ua;#lqP_Ojp"
7d[!REcoO[``ng'ZPiW9Y,ZtX%'15RX+.;b#tAEC9W3aK=DTSFo3c>ZXJW>(Js56*U89U8Goj',
^o5dMo+K9[$T_XHTcsj%Qq7#,9(KrRZ/;EVI@$ONA"UDJ@P@&4=7:pt0HUBmQ=*t)/Jo:(7!T>g
A0h*;_7au6o1a\7#GX8jVS"UkDN,C*e&,X&lrTG[c[#>dUZt^mE='Y;[\,;[?p#'f4W+&T_N0$t
G"u%JqF)V`+R\Zs0L(UZZR8iqCN-BYA)V8j&d4dH$26P!4#P,NO$Ut]?pr2"mFH5UhS?_GT;H?%
:Nc)@LBOC<W8NnW_-#rp":kPEp0dg^PM(:m^DH+6@Bct>G$KH%[6rG5inW@?dCpb`7=rSQ`l+n3
K#/Z""r6QOYi)(LBkdCYR(k=';f19ZBt8%6CoZSTh+CrO>?iAgYUp.=4s&K`S=;VXqZdEPh<c<K
EQs3OOk"'h[-hPooe0T$_.X^X(3_hg_1TNB4SZZ!cB\^YOYGZ<;ja$p/PV2+hVA$70"59<'b$5j
.4RH\Ok?VgHfW&.]ZpI?.)A^l"`Rlqr8!!&]8UG-%n?C&N"p0==jjDN!6G:\Fnk6X"J_eZoUp%e
@1^5.*mB\3WRe](m>.1ah1uDJB0a_8bNrj>ZdjSoV^UF;1J<>)hZ/%2#mu=#$U#>67W"L087?Yp
qqoRIE2EZ5lG9FDqT^)<R-;J?oo]jBeE:n<"HVc+8K*cq!R/e;<=d)Es%3$4_=Aci4,(glPc.Vo
1Z>_1o9;J&6#Y3aan<<G@[u<eN5g]t7n>=OZ7X.M^oJ\gM[(I]KI!lL-G)O<2FOp"a&"O=Ps]#9
qc`[EoUKI;WbhY`YEE:lL]Y)[#7CtXHPaW07Y?()B[k>uBBjp`)&7Hp3rZm^^I$D&l?l[W&JC&*
##Q!9YbhYT.ufiZTt"b`4d\@c:gHgPT0IRF0U)K*<pW0LCGk%P,oA,+!#G(^Y=k2hlfVStCTWce
.4d8"-!Cf:mg4;oF7b/%RZ84%l$E`K,oDW>,bh+Qpi6ZJK><s>(gkQ_P`HYLEL1X%#Km.A&.,+V
:p0;qf,??,KaYXd7r.>a&ra!M(h!uk"d*c]K2F_:d-AHg?0kd$X.'S,,X;+3!#Xr6rRG%`-VH.b
\1L7'!"XP88&)O!(?W!b=3*qfm*hZFNmip.>VfH2*<mL_Kgts=cO2$9.\Zq2l+opJ)k6S0@5R`)
Y:Y]09A4?f&<d>*o>*F/!t0i8+#?LFpCYa:N=c?qHsc+24W#b&/kHRCEJlNS_U`l&\9!.FrT-\m
XYDNYGuCb8?R8!H&A[t$0X4MeL9$8X0G;pfU^B2"=<4qQ4^>b2[O:O/LrAP@C<jLnJoQS&(_Qs*
keTSHC\;(DM_NW?OdR0;<%2\_fR&qTMgX'*OVipRI<ps<?jnlJL5IC0"[!W/cI$:mlR?2\P[*ef
JZdAC;&u7ZFS_Zjk>-P8rh0Z+9*VZF3><)O5lamq-BI1UZ+20+UJO,eG,R*0B-NM.FQ6d`j3VNL
m+W)a8qLJU&AUG/Qn7?a%m/ijeuNE,Ec^9N$3t'K%,>5m\0Rdn#"IU<jMDT0=paaBJ8Pl5mY1+F
),6!i]NNf?luXKW:)PH@@_cM+oPt8XP.`Rq#[h/=qJp6nn%h0[jL5Dija]TO'c-4,]_lV9FW7S=
#2W")ESY:i&d2&)?ufXV3Q-',7VA]>4;c@$@,]^R2.0aBKj0W$8hb/2)^>am366`?'tu+kZqc^c
*^VtuBM9cO'dfn<)).I,o*7'-&tF)D0N:F@gdd(#*fQX!_9=60riC=;>I#0$o$tg6T"q?-RLC&#
[Etj0!5CpRTcsgd*=4Of>N#QNjDOg03p`/6iEcd>hd8UQ=Z!+m809N7r'a(iTsH!]GA%O&"p$Q+
Yh\j'lG8TndH&d;:pU"4\FF']jo=2+/ut&GL]h4m##Q!9E1@/oNeEP/7)"%_7<L))e*NFd!K*lm
>7Ht$L$$!Vb1AXb4F!V*d81DYE4#oU,@T)6LDIU6Z<q0=MbV#A',Zq)h0XSpGKEg,,#Cccm1]l\
('LiuIr5a^-c>9k""t$1n%nREb\sF[Db05qMj?SWAF\!a_!tUl4!ht#!*VNf?J?\ZP-jJjflA?S
<FHTR?i"Z)BUUF"I=ku$3U*]#^/KX#+FmM,Q:@?+=A=V5@F<3YZq5sC-&l-4>CVbs7T&Akc+*=<
$-#TN0dI%_":rLI]B87u4KBENimgRuT!?,dR`YiY`'=qd8<=&W%!jW$cY+\!UQN/(Y\`(=AU.h7
ogj6F;/0^(Y8RN7rCH$;N^l_rY++cMJcL+`O,lUhB\A#<-cVtIkhM;o'C2A+%@B8#fGt'TQ=*sD
8g75&!M&AifIr4"/nWgA[$-&M8h`@Z@ZMIIU')^mF.8,2H=HsE@-e:e)ioYr=(-jbPJJ_/L]#LE
\@;Ze&AU[E`m+ateW0UAirJ3$#(7u6I/-M%YAD#*(g)3n[n0C5"E:mVA%uA-\[o5LE"O$iO4tJ"
pa-)TC8$'BCQKY=m+jVJ1uE=!&k:n!mA_oO?'^]GAGQ_e'E_jH(A]9_nfWHK%t9FiI3,Ir68YFR
eutP+`+0NqFjs*l'SeIXl3=k08.YdD*fO?<2"mh4:K1b##>'Ui0i"jPS(?uSjB%=Z#i8X7TcshO
!=s?A_H&*r<*9.j&LUU$WqsUi$+),cNc,1M,oB:`-]oO%j#i]IQ&5IMB@ZSiXX_PRmuDt2k,\>l
)E0]j^t)]QR1bG^%]u[c!]\5QZ#aq>.B,WYBSQqiEDC,i(^/Q4LL<Ua[<a_bp'8)#FiBFb!6k+D
4q`mVY^=CD&VJT%EnoT>mu7`=?\0c%!1rAifH5k$\iaT%^1:K7fmUIXT'T`qJ$]5$d>UJF!-"2.
A,dIE&J[4Wn@2K0,E'gkJC.@)IA@!k&AZ[7XQhHgVE9P,qjL\e-9AD:LWhTPFrN+J2d8.V=csm-
,X!!X>D08&e&2q87f)PcZ4f;p9Jl,Uju[,Ek<!-Z/bIU,$l)V>.sWf^#pW`rCJnTT(td741B(:A
kN(hD(l@QF8.Ydl*m@-kfKTF6?2p+hmZ^B'VqebN5Ao@hq8!mb`<2]ccYjg>GJ43*&AZ[7N8ZA*
kcKk7@hZoio<_$%Fe8]T@ph-:`C/]l%h]#\K2!DGrS_S727_%fLG%3#Dm[!e=FK7$hqX?>W$b.j
<($aljMC79_Uoa<SR7esgHlC`@%oM(G"@#A(e@.u$jcu#hLci2YZlhA7QBUHM7igW$lG1CU!_C*
Z_.GH&AT;L)#ImUBXo@k@%?bC2l5E/nGALd;qOFM8qIlI\rn1d"[*^eqZi=I0P4Q+Hdu:_IbW6^
0sLP0a6H&8&d7]!%n?)DUOjJL.a6e$?=!%rE+7e<FDkEM%G9JL'.n&lMb>a?$NaGbK<6W)%P2JQ
N%8+EqWYl^cZ#`^UUQgdJcO0V_+:(dl^0T=WP[54?s*^J4(S1eeRZH_A)J@RaFaJ1jM=JgfT_"l
1ZPP[1RSUA8.:Hs4"j,9!1H"eP=hTq'ooB;ZNc;IJ+onlQH/l2P0[/(Da]0W;".k<k%'5PA,h.V
T/h#9i]MX^BI8h4Bu#*JPQV#[gOkVMTf1QhZF>-5Z:^Gm>CH+i-f="[m]$EarkD)h[j25e*=kVV
Mf;96gm\DS)%>,"Z)d_jA\d_<M;pe[@Rq'GP<@K^0?TiR"WLdRH7/1HX_,Qd@c2Y\aFaKDoO,%j
7]31=p9/3l;i$.9cYDQbYh*tB#*L)/SE%HU86GRSH$IO)NgFeGld0"r62k"AE:Lc<,RE="*ZS-f
`eLT^S8sG"kots5UMRMO@&1DD<bj`?5lct)K\\,:`+=3oHZkI18_UEH]qu`&0>V[kR03Ouj[bbt
<3tAH(LlMs*BAFQI5]+&5EHuf*9Y.pOYC^kf$A1/N_)/=IbtfJi;+)I5l`k7i0c'RY'T+oQd1p:
B"EK(_&+$"/!ebV69p,&T'F/&.\*!CVL7]46eKBf8:gh\Jd3N+)GOCU4<)9p7gP0I6(0W<dr++=
UQHZ!1jQ;e'#p_-QIUH0f&"](?KXqVg&sKd1?.%1B[*6P,RE>E*]urH<N-]s+VXgO5H30[Q:PB=
=;BW68WX&U4NW56W%aY4:/bJ_!L(@%3[a=X1U-(-/eS;+B+O,L@6QJ2R,i4R_)Z4RM1K)>&AXi"
3'@m<=G<0<pDL0B`k]Qc;A'-%0G!:j@C-G7HYNO#1uPKOTd0p%fcD,4iA6'oe"uR06>5/%2in.C
4O8XSV9pV)hU.&u'A/b$8qI&INX*0@@5N.R4@"DD=P2DfJbd>65leF;K,lF8`giO`YM4R<Mh*,Z
i5$K$MhFeS>fqdA"$]9apja2PJcMD-_8/[pWko.M:YuTtXf?-IX77esO9>Tsfn6CmY=TUeMP+n/
biYS,eh;DK$m\+=0Cdsk,hu@3diq"3)f9u6g>8dV%Wsrd#*L*Z2gB:6,j`]B*Hmo39scUj]BMWP
.IURI,XDEKoAC;tcF)UCm'R&*rfBi/E;`A%,RAo*Wu"?L'H>Y\63[<^1#S7)+:/*oRg10dl23)D
SD]+Fon@f)gL3>["G$/.R(6<W\n6^5lE7He;;O5Os"8X^I@(%,&AW'ER#cnT0Le-FJPk=FE@0tR
Js%5Vgs1Po8/T6'8kbSj&\$3'b((`CJ-Vk2_V(<&\^F"]S1^AHL=37a:lle"gtICC^0C(9\*iDI
be<JO6%T)]0Gt0UPMk86=Dm.j^24uY!-jY3UZKq#^&N+grOp$t,RAo*VlOcb,?.l@1QN)k4rHY<
!-iHN(0,@UBnsn=Mq3(X\#oq!+93IQU;B6U]%i%^",<oqq<fu!"9J""EoiAUqZL,7FL(d)ip+Di
8:ghdYgk1$D"pq,B-*Ze\X2eW"scJ74P6dQBYSjB\\377nbEcB4f06a"9DoWKATq\GMg>Q*Z;^c
im:7S,R=BooO.UR*]^BjK>]]t2gmfh"A47G0[#*$WA#!t/f?29m?`-p!D*h&AuRJq3bR#S;h*+L
+:/+b>Rt^aW8$S*nH"^S!T5pJr\V^U.bX`6+)aCW"G#Mpq!",IpkV5PIF$Id#m.n&*fQZW_@'XJ
Ndbon*si"aR3)9?T1pIM,bReJX!^15i5&G;%S!e1h7/LK!FQKMAs1kURZmV>&-1;Ui1@Adl61KA
qe8;."G!=2R*UVR-O'Xfj#mY\"99JG#m();@Yt1X&--rO$j6S"+:/)LGjl.H,XDFg5qroN^k3m<
!8t[P(m"k$J-X%Y!!!Om+96oshdA\^"99JW!s&Ba8:ggA*[F#O!"V9GJ0YC#4=CC8!-jS.!<>7W
"p:#2!:ZWu#QWdK&d/4(i#<(qJcNT=@NYZ$#>#I,^k6PZ+:/)L%l,7-J-TF-5u.Xan=UU(!8p-I
"9;7A!s/IIO9>Ra4NN$Q!$5Z9!!!Om+9:?Q*rP3u>F5ElJ-Yr[q"97?!<DTYi&:u!;2$8$!'E5<
Ji?RN!s/H5*ot/V<QK[j^k7D7E*3],+9:oh$U+8bIgcS_4EuG_(Ju=X!WWa;,/MGcaFF9+KCAFT
!s/H5Y2I.f<ChT>^k4<4TE#5t4F!t5j3NdM4ii-RJ."LW5<_j6+9MZFY4>t#J&cj(S,O69!-"M7
e,#R%62CZ`>irkpp!9t):=('_i%bg\l0jg'4\1&&JBL&WeDHr@Ud"jp2'1Q<r%*?:6j_9`!8nb+
[d1+gKh_!156/Jj*ZWX9[g+kJ7t1MhP<:frIn:Aq*ro[T%j%CYJd;%ga*dr<;a#AmqgSDhs7K7g
n<X.USEdr.oN,&LYE),TTa(S1c%H$:^4&"K3L;&*-Lh*:DX,(!#N#O^Sgqe&*rl;f-!^QP(m?R,
`ddhD!.Z]do%bAbp#2kM5aQTg6N6rDj56gI!)D+A-$M'SZ694p,nI:)!79i^ppZ<FJ,>p+2?\PC
)A?<fr;<3S!2.M:l11;Kfan/Inl<9Vo\cSXfan/Inp/5+HZ7GgrcJ2@*i$o.rV60aOVAuY!W]A[
k$]=T30=XN!0>N=_1Q;HIbN-j%01?S?2eX:a%micL&canl>k?qq+kTi!5P^NnmE_`U8J\*E-DhQ
Is>E'!:TI9?iU'!)Zp-A*ppeYDLMGB!<E2H;W1sr+2@IB*t/DT\2/WZ=mrEg(_?]:.M'rL!8rPP
r#5_>!++g(^MSBQ+9:?Q*o,3d!s/Io%0HY3G`_n)!,qQR!s/I/$NgG1!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!",2?"[:oncK~>
%%Trailer
%%EOF

%%EndDocument
 @endspecial @beginspecial 53 @llx 48 @lly 561 @urx 577
@ury 5080 @rwi @setspecial
%%BeginDocument: CLEperpReqb1Text.eps.eps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: (Wolfram Mathematica 6.0 for Linux x86 (64-bit) (June 2, 2008))
%%CreationDate: (Saturday, December 19, 2009) (21:43:44)
%%Title: Clipboard
%%DocumentNeededResources: font Times-Italic
%%+ font Times-Roman
%%DocumentSuppliedResources: font Times-Italic-MISO
%%+ font Times-Roman-MISO
%%DocumentNeededFonts: Times-Italic
%%+ Times-Roman
%%DocumentSuppliedFonts: Times-Italic-MISO
%%+ Times-Roman-MISO
%%DocumentFonts: Times-Italic
%%+ Times-Roman
%%+ Times-Italic-MISO
%%+ Times-Roman-MISO
%%BoundingBox: 53 48 561 577
%%EndComments
/g { setgray} bind def
/k { setcmykcolor} bind def
/p { gsave} bind def
/r { setrgbcolor} bind def
/w { setlinewidth} bind def
/C { curveto} bind def
/F { fill} bind def
/L { lineto} bind def
/rL { rlineto} bind def
/P { grestore} bind def
/s { stroke} bind def
/S { show} bind def
/N {currentpoint 3 -1 roll show moveto} bind def
/Msf { findfont exch scalefont [1 0 0 -1 0 0 ] makefont setfont} bind def
/m { moveto} bind def
/Mr { rmoveto} bind def
/Mx {currentpoint exch pop moveto} bind def
/My {currentpoint pop exch moveto} bind def
/X {0 rmoveto} bind def
/Y {0 exch rmoveto} bind def
0.0625 -0.0625 scale 0 -9719 translate
-624 -64 translate
[1 0 0 1 0 0]  concat
16 w
0 g
[ ] 0 setdash
2 setlinecap
0 setlinejoin
10 setmiterlimit
[1 0 0 1 624 5047]  concat
16 w
[ ] 0 setdash
[1 0 0 1 -624 -5047]  concat
16 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
16 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
16 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
16 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
16 w
[ ] 0 setdash
p
newpath 624 64 m
624 9783 L
10224 9783 L
10224 64 L
closepath
clip newpath
[1 0 0 1 0 0]  concat
16 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
16 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
16 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
16 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
16 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
16 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
16 w
[ ] 0 setdash
0 g
8 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
8 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
8 w
[ ] 0 setdash
[1 0 0 1 7482.423 3453.777]  concat
8 w
[ ] 0 setdash
/MISOfy
{
    /newfontname exch def
    /oldfontname exch def

    oldfontname findfont
    dup length dict begin
        {1 index /FID ne {def} {pop pop} ifelse} forall
        /Encoding ISOLatin1Encoding def
        currentdict
    end

    newfontname exch definefont pop
} def
%%IncludeResource: font Times-Roman
%%IncludeFont: Times-Roman
%%BeginResource: font Times-Roman-MISO
%%BeginFont: Times-Roman-MISO
/Times-Roman /Times-Roman-MISO MISOfy
%%EndFont
%%EndResource
%%IncludeResource: font Times-Roman-MISO
%%IncludeFont: Times-Roman-MISO
512 /Times-Roman-MISO Msf
%%IncludeResource: font Times-Italic
%%IncludeFont: Times-Italic
%%BeginResource: font Times-Italic-MISO
%%BeginFont: Times-Italic-MISO
/Times-Italic /Times-Italic-MISO MISOfy
%%EndFont
%%EndResource
%%IncludeResource: font Times-Italic-MISO
%%IncludeFont: Times-Italic-MISO
512 /Times-Italic-MISO Msf
637 5396 m
(x) N
%%IncludeResource: font Times-Roman-MISO
%%IncludeFont: Times-Roman-MISO
364 /Times-Roman-MISO Msf
864 5477 m
(1) N
%%IncludeResource: font Times-Roman-MISO
%%IncludeFont: Times-Roman-MISO
512 /Times-Roman-MISO Msf
[1 0 0 1 -7482.423 -3453.777]  concat
8 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
8 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
8 w
[ ] 0 setdash
[1 0 0 1 3794.586 2867.859]  concat
8 w
[ ] 0 setdash
%%IncludeResource: font Times-Italic-MISO
%%IncludeFont: Times-Italic-MISO
512 /Times-Italic-MISO Msf
1021 5396 m
(x) N
%%IncludeResource: font Times-Roman-MISO
%%IncludeFont: Times-Roman-MISO
364 /Times-Roman-MISO Msf
1248 5477 m
(2) N
%%IncludeResource: font Times-Roman-MISO
%%IncludeFont: Times-Roman-MISO
512 /Times-Roman-MISO Msf
[1 0 0 1 -3794.586 -2867.859]  concat
8 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
8 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
8 w
[ ] 0 setdash
[1 0 0 1 3103.511 -4552.541]  concat
8 w
[ ] 0 setdash
624 5396 m
(z) N
[1 0 0 1 -3103.511 4552.541]  concat
8 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
8 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
8 w
[ ] 0 setdash
[1 0 0 1 3168.973 3484.052]  concat
8 w
[ ] 0 setdash
%%IncludeResource: font Times-Italic-MISO
%%IncludeFont: Times-Italic-MISO
512 /Times-Italic-MISO Msf
624 5396 m
(E) N
%%IncludeResource: font Times-Roman-MISO
%%IncludeFont: Times-Roman-MISO
364 /Times-Roman-MISO Msf
936 5477 m
(0) N
%%IncludeResource: font Times-Roman-MISO
%%IncludeFont: Times-Roman-MISO
512 /Times-Roman-MISO Msf
[1 0 0 1 -3168.973 -3484.052]  concat
8 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
8 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
8 w
[ ] 0 setdash
[1 0 0 1 5309.179 -349.867]  concat
8 w
[ ] 0 setdash
%%IncludeResource: font Times-Italic-MISO
%%IncludeFont: Times-Italic-MISO
512 /Times-Italic-MISO Msf
624 5415 m
(Q) N
%%IncludeResource: font Times-Roman-MISO
%%IncludeFont: Times-Roman-MISO
364 /Times-Roman-MISO Msf
993 5496 m
(1) N
%%IncludeResource: font Times-Roman-MISO
%%IncludeFont: Times-Roman-MISO
512 /Times-Roman-MISO Msf
[1 0 0 1 -5309.179 349.867]  concat
8 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
8 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
8 w
[ ] 0 setdash
P
[1 0 0 1 0 0]  concat
16 w
[ ] 0 setdash
[1 0 0 1 0 0]  concat
16 w
[ ] 0 setdash
16 w
0 g
[ ] 0 setdash
2 setlinecap
0 setlinejoin
10 setmiterlimit
%Trailer
%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
